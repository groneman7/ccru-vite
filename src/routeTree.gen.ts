/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UiIndexRouteImport } from './routes/ui/index'
import { Route as CalendarIndexRouteImport } from './routes/calendar/index'
import { Route as UiButtonsRouteImport } from './routes/ui/buttons'
import { Route as AdminPositionsRouteRouteImport } from './routes/admin/positions/route'
import { Route as CalendarEventsEventIdRouteImport } from './routes/calendar/events.$eventId'
import { Route as CalendarYearMonthRouteImport } from './routes/calendar/$year.$month'
import { Route as AdminPositionsPositionIdRouteImport } from './routes/admin/positions/$positionId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UiIndexRoute = UiIndexRouteImport.update({
  id: '/ui/',
  path: '/ui/',
  getParentRoute: () => rootRouteImport,
} as any)
const CalendarIndexRoute = CalendarIndexRouteImport.update({
  id: '/calendar/',
  path: '/calendar/',
  getParentRoute: () => rootRouteImport,
} as any)
const UiButtonsRoute = UiButtonsRouteImport.update({
  id: '/ui/buttons',
  path: '/ui/buttons',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminPositionsRouteRoute = AdminPositionsRouteRouteImport.update({
  id: '/admin/positions',
  path: '/admin/positions',
  getParentRoute: () => rootRouteImport,
} as any)
const CalendarEventsEventIdRoute = CalendarEventsEventIdRouteImport.update({
  id: '/calendar/events/$eventId',
  path: '/calendar/events/$eventId',
  getParentRoute: () => rootRouteImport,
} as any)
const CalendarYearMonthRoute = CalendarYearMonthRouteImport.update({
  id: '/calendar/$year/$month',
  path: '/calendar/$year/$month',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminPositionsPositionIdRoute =
  AdminPositionsPositionIdRouteImport.update({
    id: '/$positionId',
    path: '/$positionId',
    getParentRoute: () => AdminPositionsRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin/positions': typeof AdminPositionsRouteRouteWithChildren
  '/ui/buttons': typeof UiButtonsRoute
  '/calendar': typeof CalendarIndexRoute
  '/ui': typeof UiIndexRoute
  '/admin/positions/$positionId': typeof AdminPositionsPositionIdRoute
  '/calendar/$year/$month': typeof CalendarYearMonthRoute
  '/calendar/events/$eventId': typeof CalendarEventsEventIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin/positions': typeof AdminPositionsRouteRouteWithChildren
  '/ui/buttons': typeof UiButtonsRoute
  '/calendar': typeof CalendarIndexRoute
  '/ui': typeof UiIndexRoute
  '/admin/positions/$positionId': typeof AdminPositionsPositionIdRoute
  '/calendar/$year/$month': typeof CalendarYearMonthRoute
  '/calendar/events/$eventId': typeof CalendarEventsEventIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin/positions': typeof AdminPositionsRouteRouteWithChildren
  '/ui/buttons': typeof UiButtonsRoute
  '/calendar/': typeof CalendarIndexRoute
  '/ui/': typeof UiIndexRoute
  '/admin/positions/$positionId': typeof AdminPositionsPositionIdRoute
  '/calendar/$year/$month': typeof CalendarYearMonthRoute
  '/calendar/events/$eventId': typeof CalendarEventsEventIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin/positions'
    | '/ui/buttons'
    | '/calendar'
    | '/ui'
    | '/admin/positions/$positionId'
    | '/calendar/$year/$month'
    | '/calendar/events/$eventId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/positions'
    | '/ui/buttons'
    | '/calendar'
    | '/ui'
    | '/admin/positions/$positionId'
    | '/calendar/$year/$month'
    | '/calendar/events/$eventId'
  id:
    | '__root__'
    | '/'
    | '/admin/positions'
    | '/ui/buttons'
    | '/calendar/'
    | '/ui/'
    | '/admin/positions/$positionId'
    | '/calendar/$year/$month'
    | '/calendar/events/$eventId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminPositionsRouteRoute: typeof AdminPositionsRouteRouteWithChildren
  UiButtonsRoute: typeof UiButtonsRoute
  CalendarIndexRoute: typeof CalendarIndexRoute
  UiIndexRoute: typeof UiIndexRoute
  CalendarYearMonthRoute: typeof CalendarYearMonthRoute
  CalendarEventsEventIdRoute: typeof CalendarEventsEventIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ui/': {
      id: '/ui/'
      path: '/ui'
      fullPath: '/ui'
      preLoaderRoute: typeof UiIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calendar/': {
      id: '/calendar/'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ui/buttons': {
      id: '/ui/buttons'
      path: '/ui/buttons'
      fullPath: '/ui/buttons'
      preLoaderRoute: typeof UiButtonsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/positions': {
      id: '/admin/positions'
      path: '/admin/positions'
      fullPath: '/admin/positions'
      preLoaderRoute: typeof AdminPositionsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calendar/events/$eventId': {
      id: '/calendar/events/$eventId'
      path: '/calendar/events/$eventId'
      fullPath: '/calendar/events/$eventId'
      preLoaderRoute: typeof CalendarEventsEventIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calendar/$year/$month': {
      id: '/calendar/$year/$month'
      path: '/calendar/$year/$month'
      fullPath: '/calendar/$year/$month'
      preLoaderRoute: typeof CalendarYearMonthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/positions/$positionId': {
      id: '/admin/positions/$positionId'
      path: '/$positionId'
      fullPath: '/admin/positions/$positionId'
      preLoaderRoute: typeof AdminPositionsPositionIdRouteImport
      parentRoute: typeof AdminPositionsRouteRoute
    }
  }
}

interface AdminPositionsRouteRouteChildren {
  AdminPositionsPositionIdRoute: typeof AdminPositionsPositionIdRoute
}

const AdminPositionsRouteRouteChildren: AdminPositionsRouteRouteChildren = {
  AdminPositionsPositionIdRoute: AdminPositionsPositionIdRoute,
}

const AdminPositionsRouteRouteWithChildren =
  AdminPositionsRouteRoute._addFileChildren(AdminPositionsRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminPositionsRouteRoute: AdminPositionsRouteRouteWithChildren,
  UiButtonsRoute: UiButtonsRoute,
  CalendarIndexRoute: CalendarIndexRoute,
  UiIndexRoute: UiIndexRoute,
  CalendarYearMonthRoute: CalendarYearMonthRoute,
  CalendarEventsEventIdRoute: CalendarEventsEventIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
